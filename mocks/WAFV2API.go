// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	wafv2 "github.com/aws/aws-sdk-go/service/wafv2"
)

// WAFV2API is an autogenerated mock type for the WAFV2API type
type WAFV2API struct {
	mock.Mock
}

// AssociateWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) AssociateWebACL(_a0 *wafv2.AssociateWebACLInput) (*wafv2.AssociateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.AssociateWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.AssociateWebACLInput) *wafv2.AssociateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.AssociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.AssociateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) AssociateWebACLRequest(_a0 *wafv2.AssociateWebACLInput) (*request.Request, *wafv2.AssociateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.AssociateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.AssociateWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.AssociateWebACLInput) *wafv2.AssociateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.AssociateWebACLOutput)
		}
	}

	return r0, r1
}

// AssociateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) AssociateWebACLWithContext(_a0 context.Context, _a1 *wafv2.AssociateWebACLInput, _a2 ...request.Option) (*wafv2.AssociateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.AssociateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.AssociateWebACLInput, ...request.Option) *wafv2.AssociateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.AssociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.AssociateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCapacity provides a mock function with given fields: _a0
func (_m *WAFV2API) CheckCapacity(_a0 *wafv2.CheckCapacityInput) (*wafv2.CheckCapacityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.CheckCapacityOutput
	if rf, ok := ret.Get(0).(func(*wafv2.CheckCapacityInput) *wafv2.CheckCapacityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CheckCapacityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.CheckCapacityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCapacityRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) CheckCapacityRequest(_a0 *wafv2.CheckCapacityInput) (*request.Request, *wafv2.CheckCapacityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.CheckCapacityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.CheckCapacityOutput
	if rf, ok := ret.Get(1).(func(*wafv2.CheckCapacityInput) *wafv2.CheckCapacityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.CheckCapacityOutput)
		}
	}

	return r0, r1
}

// CheckCapacityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) CheckCapacityWithContext(_a0 context.Context, _a1 *wafv2.CheckCapacityInput, _a2 ...request.Option) (*wafv2.CheckCapacityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.CheckCapacityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.CheckCapacityInput, ...request.Option) *wafv2.CheckCapacityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CheckCapacityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.CheckCapacityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSet provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateIPSet(_a0 *wafv2.CreateIPSetInput) (*wafv2.CreateIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.CreateIPSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.CreateIPSetInput) *wafv2.CreateIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.CreateIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateIPSetRequest(_a0 *wafv2.CreateIPSetInput) (*request.Request, *wafv2.CreateIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.CreateIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.CreateIPSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.CreateIPSetInput) *wafv2.CreateIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.CreateIPSetOutput)
		}
	}

	return r0, r1
}

// CreateIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) CreateIPSetWithContext(_a0 context.Context, _a1 *wafv2.CreateIPSetInput, _a2 ...request.Option) (*wafv2.CreateIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.CreateIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.CreateIPSetInput, ...request.Option) *wafv2.CreateIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.CreateIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateRegexPatternSet(_a0 *wafv2.CreateRegexPatternSetInput) (*wafv2.CreateRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.CreateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.CreateRegexPatternSetInput) *wafv2.CreateRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.CreateRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateRegexPatternSetRequest(_a0 *wafv2.CreateRegexPatternSetInput) (*request.Request, *wafv2.CreateRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.CreateRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.CreateRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.CreateRegexPatternSetInput) *wafv2.CreateRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.CreateRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// CreateRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) CreateRegexPatternSetWithContext(_a0 context.Context, _a1 *wafv2.CreateRegexPatternSetInput, _a2 ...request.Option) (*wafv2.CreateRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.CreateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.CreateRegexPatternSetInput, ...request.Option) *wafv2.CreateRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.CreateRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleGroup provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateRuleGroup(_a0 *wafv2.CreateRuleGroupInput) (*wafv2.CreateRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.CreateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*wafv2.CreateRuleGroupInput) *wafv2.CreateRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.CreateRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateRuleGroupRequest(_a0 *wafv2.CreateRuleGroupInput) (*request.Request, *wafv2.CreateRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.CreateRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.CreateRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*wafv2.CreateRuleGroupInput) *wafv2.CreateRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.CreateRuleGroupOutput)
		}
	}

	return r0, r1
}

// CreateRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) CreateRuleGroupWithContext(_a0 context.Context, _a1 *wafv2.CreateRuleGroupInput, _a2 ...request.Option) (*wafv2.CreateRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.CreateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.CreateRuleGroupInput, ...request.Option) *wafv2.CreateRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.CreateRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateWebACL(_a0 *wafv2.CreateWebACLInput) (*wafv2.CreateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.CreateWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.CreateWebACLInput) *wafv2.CreateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.CreateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) CreateWebACLRequest(_a0 *wafv2.CreateWebACLInput) (*request.Request, *wafv2.CreateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.CreateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.CreateWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.CreateWebACLInput) *wafv2.CreateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.CreateWebACLOutput)
		}
	}

	return r0, r1
}

// CreateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) CreateWebACLWithContext(_a0 context.Context, _a1 *wafv2.CreateWebACLInput, _a2 ...request.Option) (*wafv2.CreateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.CreateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.CreateWebACLInput, ...request.Option) *wafv2.CreateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.CreateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.CreateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPSet provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteIPSet(_a0 *wafv2.DeleteIPSetInput) (*wafv2.DeleteIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DeleteIPSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteIPSetInput) *wafv2.DeleteIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteIPSetRequest(_a0 *wafv2.DeleteIPSetInput) (*request.Request, *wafv2.DeleteIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DeleteIPSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteIPSetInput) *wafv2.DeleteIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DeleteIPSetOutput)
		}
	}

	return r0, r1
}

// DeleteIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DeleteIPSetWithContext(_a0 context.Context, _a1 *wafv2.DeleteIPSetInput, _a2 ...request.Option) (*wafv2.DeleteIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DeleteIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DeleteIPSetInput, ...request.Option) *wafv2.DeleteIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DeleteIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoggingConfiguration provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteLoggingConfiguration(_a0 *wafv2.DeleteLoggingConfigurationInput) (*wafv2.DeleteLoggingConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DeleteLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteLoggingConfigurationInput) *wafv2.DeleteLoggingConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteLoggingConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoggingConfigurationRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteLoggingConfigurationRequest(_a0 *wafv2.DeleteLoggingConfigurationInput) (*request.Request, *wafv2.DeleteLoggingConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteLoggingConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DeleteLoggingConfigurationOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteLoggingConfigurationInput) *wafv2.DeleteLoggingConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DeleteLoggingConfigurationOutput)
		}
	}

	return r0, r1
}

// DeleteLoggingConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DeleteLoggingConfigurationWithContext(_a0 context.Context, _a1 *wafv2.DeleteLoggingConfigurationInput, _a2 ...request.Option) (*wafv2.DeleteLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DeleteLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DeleteLoggingConfigurationInput, ...request.Option) *wafv2.DeleteLoggingConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DeleteLoggingConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteRegexPatternSet(_a0 *wafv2.DeleteRegexPatternSetInput) (*wafv2.DeleteRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DeleteRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteRegexPatternSetInput) *wafv2.DeleteRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteRegexPatternSetRequest(_a0 *wafv2.DeleteRegexPatternSetInput) (*request.Request, *wafv2.DeleteRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DeleteRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteRegexPatternSetInput) *wafv2.DeleteRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DeleteRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// DeleteRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DeleteRegexPatternSetWithContext(_a0 context.Context, _a1 *wafv2.DeleteRegexPatternSetInput, _a2 ...request.Option) (*wafv2.DeleteRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DeleteRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DeleteRegexPatternSetInput, ...request.Option) *wafv2.DeleteRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DeleteRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleGroup provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteRuleGroup(_a0 *wafv2.DeleteRuleGroupInput) (*wafv2.DeleteRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DeleteRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteRuleGroupInput) *wafv2.DeleteRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteRuleGroupRequest(_a0 *wafv2.DeleteRuleGroupInput) (*request.Request, *wafv2.DeleteRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DeleteRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteRuleGroupInput) *wafv2.DeleteRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DeleteRuleGroupOutput)
		}
	}

	return r0, r1
}

// DeleteRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DeleteRuleGroupWithContext(_a0 context.Context, _a1 *wafv2.DeleteRuleGroupInput, _a2 ...request.Option) (*wafv2.DeleteRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DeleteRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DeleteRuleGroupInput, ...request.Option) *wafv2.DeleteRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DeleteRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteWebACL(_a0 *wafv2.DeleteWebACLInput) (*wafv2.DeleteWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DeleteWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteWebACLInput) *wafv2.DeleteWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DeleteWebACLRequest(_a0 *wafv2.DeleteWebACLInput) (*request.Request, *wafv2.DeleteWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DeleteWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DeleteWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DeleteWebACLInput) *wafv2.DeleteWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DeleteWebACLOutput)
		}
	}

	return r0, r1
}

// DeleteWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DeleteWebACLWithContext(_a0 context.Context, _a1 *wafv2.DeleteWebACLInput, _a2 ...request.Option) (*wafv2.DeleteWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DeleteWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DeleteWebACLInput, ...request.Option) *wafv2.DeleteWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DeleteWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DeleteWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeManagedRuleGroup provides a mock function with given fields: _a0
func (_m *WAFV2API) DescribeManagedRuleGroup(_a0 *wafv2.DescribeManagedRuleGroupInput) (*wafv2.DescribeManagedRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DescribeManagedRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DescribeManagedRuleGroupInput) *wafv2.DescribeManagedRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DescribeManagedRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DescribeManagedRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeManagedRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DescribeManagedRuleGroupRequest(_a0 *wafv2.DescribeManagedRuleGroupInput) (*request.Request, *wafv2.DescribeManagedRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DescribeManagedRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DescribeManagedRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DescribeManagedRuleGroupInput) *wafv2.DescribeManagedRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DescribeManagedRuleGroupOutput)
		}
	}

	return r0, r1
}

// DescribeManagedRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DescribeManagedRuleGroupWithContext(_a0 context.Context, _a1 *wafv2.DescribeManagedRuleGroupInput, _a2 ...request.Option) (*wafv2.DescribeManagedRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DescribeManagedRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DescribeManagedRuleGroupInput, ...request.Option) *wafv2.DescribeManagedRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DescribeManagedRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DescribeManagedRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) DisassociateWebACL(_a0 *wafv2.DisassociateWebACLInput) (*wafv2.DisassociateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.DisassociateWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.DisassociateWebACLInput) *wafv2.DisassociateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DisassociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.DisassociateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) DisassociateWebACLRequest(_a0 *wafv2.DisassociateWebACLInput) (*request.Request, *wafv2.DisassociateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.DisassociateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.DisassociateWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.DisassociateWebACLInput) *wafv2.DisassociateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.DisassociateWebACLOutput)
		}
	}

	return r0, r1
}

// DisassociateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) DisassociateWebACLWithContext(_a0 context.Context, _a1 *wafv2.DisassociateWebACLInput, _a2 ...request.Option) (*wafv2.DisassociateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.DisassociateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.DisassociateWebACLInput, ...request.Option) *wafv2.DisassociateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.DisassociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.DisassociateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSet provides a mock function with given fields: _a0
func (_m *WAFV2API) GetIPSet(_a0 *wafv2.GetIPSetInput) (*wafv2.GetIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetIPSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetIPSetInput) *wafv2.GetIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetIPSetRequest(_a0 *wafv2.GetIPSetInput) (*request.Request, *wafv2.GetIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetIPSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetIPSetInput) *wafv2.GetIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetIPSetOutput)
		}
	}

	return r0, r1
}

// GetIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetIPSetWithContext(_a0 context.Context, _a1 *wafv2.GetIPSetInput, _a2 ...request.Option) (*wafv2.GetIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetIPSetInput, ...request.Option) *wafv2.GetIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggingConfiguration provides a mock function with given fields: _a0
func (_m *WAFV2API) GetLoggingConfiguration(_a0 *wafv2.GetLoggingConfigurationInput) (*wafv2.GetLoggingConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetLoggingConfigurationInput) *wafv2.GetLoggingConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetLoggingConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggingConfigurationRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetLoggingConfigurationRequest(_a0 *wafv2.GetLoggingConfigurationInput) (*request.Request, *wafv2.GetLoggingConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetLoggingConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetLoggingConfigurationOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetLoggingConfigurationInput) *wafv2.GetLoggingConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetLoggingConfigurationOutput)
		}
	}

	return r0, r1
}

// GetLoggingConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetLoggingConfigurationWithContext(_a0 context.Context, _a1 *wafv2.GetLoggingConfigurationInput, _a2 ...request.Option) (*wafv2.GetLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetLoggingConfigurationInput, ...request.Option) *wafv2.GetLoggingConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetLoggingConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRateBasedStatementManagedKeys provides a mock function with given fields: _a0
func (_m *WAFV2API) GetRateBasedStatementManagedKeys(_a0 *wafv2.GetRateBasedStatementManagedKeysInput) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetRateBasedStatementManagedKeysOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetRateBasedStatementManagedKeysInput) *wafv2.GetRateBasedStatementManagedKeysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetRateBasedStatementManagedKeysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetRateBasedStatementManagedKeysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRateBasedStatementManagedKeysRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetRateBasedStatementManagedKeysRequest(_a0 *wafv2.GetRateBasedStatementManagedKeysInput) (*request.Request, *wafv2.GetRateBasedStatementManagedKeysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetRateBasedStatementManagedKeysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetRateBasedStatementManagedKeysOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetRateBasedStatementManagedKeysInput) *wafv2.GetRateBasedStatementManagedKeysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetRateBasedStatementManagedKeysOutput)
		}
	}

	return r0, r1
}

// GetRateBasedStatementManagedKeysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetRateBasedStatementManagedKeysWithContext(_a0 context.Context, _a1 *wafv2.GetRateBasedStatementManagedKeysInput, _a2 ...request.Option) (*wafv2.GetRateBasedStatementManagedKeysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetRateBasedStatementManagedKeysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetRateBasedStatementManagedKeysInput, ...request.Option) *wafv2.GetRateBasedStatementManagedKeysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetRateBasedStatementManagedKeysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetRateBasedStatementManagedKeysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFV2API) GetRegexPatternSet(_a0 *wafv2.GetRegexPatternSetInput) (*wafv2.GetRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetRegexPatternSetInput) *wafv2.GetRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetRegexPatternSetRequest(_a0 *wafv2.GetRegexPatternSetInput) (*request.Request, *wafv2.GetRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetRegexPatternSetInput) *wafv2.GetRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// GetRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetRegexPatternSetWithContext(_a0 context.Context, _a1 *wafv2.GetRegexPatternSetInput, _a2 ...request.Option) (*wafv2.GetRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetRegexPatternSetInput, ...request.Option) *wafv2.GetRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleGroup provides a mock function with given fields: _a0
func (_m *WAFV2API) GetRuleGroup(_a0 *wafv2.GetRuleGroupInput) (*wafv2.GetRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetRuleGroupInput) *wafv2.GetRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetRuleGroupRequest(_a0 *wafv2.GetRuleGroupInput) (*request.Request, *wafv2.GetRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetRuleGroupInput) *wafv2.GetRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetRuleGroupOutput)
		}
	}

	return r0, r1
}

// GetRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetRuleGroupWithContext(_a0 context.Context, _a1 *wafv2.GetRuleGroupInput, _a2 ...request.Option) (*wafv2.GetRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetRuleGroupInput, ...request.Option) *wafv2.GetRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSampledRequests provides a mock function with given fields: _a0
func (_m *WAFV2API) GetSampledRequests(_a0 *wafv2.GetSampledRequestsInput) (*wafv2.GetSampledRequestsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetSampledRequestsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetSampledRequestsInput) *wafv2.GetSampledRequestsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetSampledRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetSampledRequestsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSampledRequestsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetSampledRequestsRequest(_a0 *wafv2.GetSampledRequestsInput) (*request.Request, *wafv2.GetSampledRequestsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetSampledRequestsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetSampledRequestsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetSampledRequestsInput) *wafv2.GetSampledRequestsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetSampledRequestsOutput)
		}
	}

	return r0, r1
}

// GetSampledRequestsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetSampledRequestsWithContext(_a0 context.Context, _a1 *wafv2.GetSampledRequestsInput, _a2 ...request.Option) (*wafv2.GetSampledRequestsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetSampledRequestsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetSampledRequestsInput, ...request.Option) *wafv2.GetSampledRequestsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetSampledRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetSampledRequestsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) GetWebACL(_a0 *wafv2.GetWebACLInput) (*wafv2.GetWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetWebACLInput) *wafv2.GetWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACLForResource provides a mock function with given fields: _a0
func (_m *WAFV2API) GetWebACLForResource(_a0 *wafv2.GetWebACLForResourceInput) (*wafv2.GetWebACLForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.GetWebACLForResourceOutput
	if rf, ok := ret.Get(0).(func(*wafv2.GetWebACLForResourceInput) *wafv2.GetWebACLForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetWebACLForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.GetWebACLForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACLForResourceRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetWebACLForResourceRequest(_a0 *wafv2.GetWebACLForResourceInput) (*request.Request, *wafv2.GetWebACLForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetWebACLForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetWebACLForResourceOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetWebACLForResourceInput) *wafv2.GetWebACLForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetWebACLForResourceOutput)
		}
	}

	return r0, r1
}

// GetWebACLForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetWebACLForResourceWithContext(_a0 context.Context, _a1 *wafv2.GetWebACLForResourceInput, _a2 ...request.Option) (*wafv2.GetWebACLForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetWebACLForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetWebACLForResourceInput, ...request.Option) *wafv2.GetWebACLForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetWebACLForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetWebACLForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) GetWebACLRequest(_a0 *wafv2.GetWebACLInput) (*request.Request, *wafv2.GetWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.GetWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.GetWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.GetWebACLInput) *wafv2.GetWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.GetWebACLOutput)
		}
	}

	return r0, r1
}

// GetWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) GetWebACLWithContext(_a0 context.Context, _a1 *wafv2.GetWebACLInput, _a2 ...request.Option) (*wafv2.GetWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.GetWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.GetWebACLInput, ...request.Option) *wafv2.GetWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.GetWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.GetWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableManagedRuleGroups provides a mock function with given fields: _a0
func (_m *WAFV2API) ListAvailableManagedRuleGroups(_a0 *wafv2.ListAvailableManagedRuleGroupsInput) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListAvailableManagedRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListAvailableManagedRuleGroupsInput) *wafv2.ListAvailableManagedRuleGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListAvailableManagedRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListAvailableManagedRuleGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableManagedRuleGroupsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListAvailableManagedRuleGroupsRequest(_a0 *wafv2.ListAvailableManagedRuleGroupsInput) (*request.Request, *wafv2.ListAvailableManagedRuleGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListAvailableManagedRuleGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListAvailableManagedRuleGroupsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListAvailableManagedRuleGroupsInput) *wafv2.ListAvailableManagedRuleGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListAvailableManagedRuleGroupsOutput)
		}
	}

	return r0, r1
}

// ListAvailableManagedRuleGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListAvailableManagedRuleGroupsWithContext(_a0 context.Context, _a1 *wafv2.ListAvailableManagedRuleGroupsInput, _a2 ...request.Option) (*wafv2.ListAvailableManagedRuleGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListAvailableManagedRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListAvailableManagedRuleGroupsInput, ...request.Option) *wafv2.ListAvailableManagedRuleGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListAvailableManagedRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListAvailableManagedRuleGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSets provides a mock function with given fields: _a0
func (_m *WAFV2API) ListIPSets(_a0 *wafv2.ListIPSetsInput) (*wafv2.ListIPSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListIPSetsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListIPSetsInput) *wafv2.ListIPSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListIPSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListIPSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSetsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListIPSetsRequest(_a0 *wafv2.ListIPSetsInput) (*request.Request, *wafv2.ListIPSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListIPSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListIPSetsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListIPSetsInput) *wafv2.ListIPSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListIPSetsOutput)
		}
	}

	return r0, r1
}

// ListIPSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListIPSetsWithContext(_a0 context.Context, _a1 *wafv2.ListIPSetsInput, _a2 ...request.Option) (*wafv2.ListIPSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListIPSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListIPSetsInput, ...request.Option) *wafv2.ListIPSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListIPSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListIPSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoggingConfigurations provides a mock function with given fields: _a0
func (_m *WAFV2API) ListLoggingConfigurations(_a0 *wafv2.ListLoggingConfigurationsInput) (*wafv2.ListLoggingConfigurationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListLoggingConfigurationsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListLoggingConfigurationsInput) *wafv2.ListLoggingConfigurationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListLoggingConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListLoggingConfigurationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoggingConfigurationsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListLoggingConfigurationsRequest(_a0 *wafv2.ListLoggingConfigurationsInput) (*request.Request, *wafv2.ListLoggingConfigurationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListLoggingConfigurationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListLoggingConfigurationsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListLoggingConfigurationsInput) *wafv2.ListLoggingConfigurationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListLoggingConfigurationsOutput)
		}
	}

	return r0, r1
}

// ListLoggingConfigurationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListLoggingConfigurationsWithContext(_a0 context.Context, _a1 *wafv2.ListLoggingConfigurationsInput, _a2 ...request.Option) (*wafv2.ListLoggingConfigurationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListLoggingConfigurationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListLoggingConfigurationsInput, ...request.Option) *wafv2.ListLoggingConfigurationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListLoggingConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListLoggingConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegexPatternSets provides a mock function with given fields: _a0
func (_m *WAFV2API) ListRegexPatternSets(_a0 *wafv2.ListRegexPatternSetsInput) (*wafv2.ListRegexPatternSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListRegexPatternSetsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListRegexPatternSetsInput) *wafv2.ListRegexPatternSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListRegexPatternSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListRegexPatternSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegexPatternSetsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListRegexPatternSetsRequest(_a0 *wafv2.ListRegexPatternSetsInput) (*request.Request, *wafv2.ListRegexPatternSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListRegexPatternSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListRegexPatternSetsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListRegexPatternSetsInput) *wafv2.ListRegexPatternSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListRegexPatternSetsOutput)
		}
	}

	return r0, r1
}

// ListRegexPatternSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListRegexPatternSetsWithContext(_a0 context.Context, _a1 *wafv2.ListRegexPatternSetsInput, _a2 ...request.Option) (*wafv2.ListRegexPatternSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListRegexPatternSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListRegexPatternSetsInput, ...request.Option) *wafv2.ListRegexPatternSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListRegexPatternSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListRegexPatternSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesForWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) ListResourcesForWebACL(_a0 *wafv2.ListResourcesForWebACLInput) (*wafv2.ListResourcesForWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListResourcesForWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListResourcesForWebACLInput) *wafv2.ListResourcesForWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListResourcesForWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListResourcesForWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesForWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListResourcesForWebACLRequest(_a0 *wafv2.ListResourcesForWebACLInput) (*request.Request, *wafv2.ListResourcesForWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListResourcesForWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListResourcesForWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListResourcesForWebACLInput) *wafv2.ListResourcesForWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListResourcesForWebACLOutput)
		}
	}

	return r0, r1
}

// ListResourcesForWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListResourcesForWebACLWithContext(_a0 context.Context, _a1 *wafv2.ListResourcesForWebACLInput, _a2 ...request.Option) (*wafv2.ListResourcesForWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListResourcesForWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListResourcesForWebACLInput, ...request.Option) *wafv2.ListResourcesForWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListResourcesForWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListResourcesForWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleGroups provides a mock function with given fields: _a0
func (_m *WAFV2API) ListRuleGroups(_a0 *wafv2.ListRuleGroupsInput) (*wafv2.ListRuleGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListRuleGroupsInput) *wafv2.ListRuleGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListRuleGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleGroupsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListRuleGroupsRequest(_a0 *wafv2.ListRuleGroupsInput) (*request.Request, *wafv2.ListRuleGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListRuleGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListRuleGroupsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListRuleGroupsInput) *wafv2.ListRuleGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListRuleGroupsOutput)
		}
	}

	return r0, r1
}

// ListRuleGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListRuleGroupsWithContext(_a0 context.Context, _a1 *wafv2.ListRuleGroupsInput, _a2 ...request.Option) (*wafv2.ListRuleGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListRuleGroupsInput, ...request.Option) *wafv2.ListRuleGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListRuleGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *WAFV2API) ListTagsForResource(_a0 *wafv2.ListTagsForResourceInput) (*wafv2.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListTagsForResourceInput) *wafv2.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListTagsForResourceRequest(_a0 *wafv2.ListTagsForResourceInput) (*request.Request, *wafv2.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListTagsForResourceInput) *wafv2.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListTagsForResourceWithContext(_a0 context.Context, _a1 *wafv2.ListTagsForResourceInput, _a2 ...request.Option) (*wafv2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListTagsForResourceInput, ...request.Option) *wafv2.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebACLs provides a mock function with given fields: _a0
func (_m *WAFV2API) ListWebACLs(_a0 *wafv2.ListWebACLsInput) (*wafv2.ListWebACLsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.ListWebACLsOutput
	if rf, ok := ret.Get(0).(func(*wafv2.ListWebACLsInput) *wafv2.ListWebACLsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListWebACLsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.ListWebACLsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebACLsRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) ListWebACLsRequest(_a0 *wafv2.ListWebACLsInput) (*request.Request, *wafv2.ListWebACLsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.ListWebACLsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.ListWebACLsOutput
	if rf, ok := ret.Get(1).(func(*wafv2.ListWebACLsInput) *wafv2.ListWebACLsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.ListWebACLsOutput)
		}
	}

	return r0, r1
}

// ListWebACLsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) ListWebACLsWithContext(_a0 context.Context, _a1 *wafv2.ListWebACLsInput, _a2 ...request.Option) (*wafv2.ListWebACLsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.ListWebACLsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.ListWebACLsInput, ...request.Option) *wafv2.ListWebACLsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.ListWebACLsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.ListWebACLsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLoggingConfiguration provides a mock function with given fields: _a0
func (_m *WAFV2API) PutLoggingConfiguration(_a0 *wafv2.PutLoggingConfigurationInput) (*wafv2.PutLoggingConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.PutLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(*wafv2.PutLoggingConfigurationInput) *wafv2.PutLoggingConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.PutLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.PutLoggingConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLoggingConfigurationRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) PutLoggingConfigurationRequest(_a0 *wafv2.PutLoggingConfigurationInput) (*request.Request, *wafv2.PutLoggingConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.PutLoggingConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.PutLoggingConfigurationOutput
	if rf, ok := ret.Get(1).(func(*wafv2.PutLoggingConfigurationInput) *wafv2.PutLoggingConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.PutLoggingConfigurationOutput)
		}
	}

	return r0, r1
}

// PutLoggingConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) PutLoggingConfigurationWithContext(_a0 context.Context, _a1 *wafv2.PutLoggingConfigurationInput, _a2 ...request.Option) (*wafv2.PutLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.PutLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.PutLoggingConfigurationInput, ...request.Option) *wafv2.PutLoggingConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.PutLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.PutLoggingConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *WAFV2API) TagResource(_a0 *wafv2.TagResourceInput) (*wafv2.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*wafv2.TagResourceInput) *wafv2.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) TagResourceRequest(_a0 *wafv2.TagResourceInput) (*request.Request, *wafv2.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*wafv2.TagResourceInput) *wafv2.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) TagResourceWithContext(_a0 context.Context, _a1 *wafv2.TagResourceInput, _a2 ...request.Option) (*wafv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.TagResourceInput, ...request.Option) *wafv2.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *WAFV2API) UntagResource(_a0 *wafv2.UntagResourceInput) (*wafv2.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*wafv2.UntagResourceInput) *wafv2.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) UntagResourceRequest(_a0 *wafv2.UntagResourceInput) (*request.Request, *wafv2.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*wafv2.UntagResourceInput) *wafv2.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) UntagResourceWithContext(_a0 context.Context, _a1 *wafv2.UntagResourceInput, _a2 ...request.Option) (*wafv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.UntagResourceInput, ...request.Option) *wafv2.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPSet provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateIPSet(_a0 *wafv2.UpdateIPSetInput) (*wafv2.UpdateIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.UpdateIPSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateIPSetInput) *wafv2.UpdateIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateIPSetRequest(_a0 *wafv2.UpdateIPSetInput) (*request.Request, *wafv2.UpdateIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.UpdateIPSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateIPSetInput) *wafv2.UpdateIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.UpdateIPSetOutput)
		}
	}

	return r0, r1
}

// UpdateIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) UpdateIPSetWithContext(_a0 context.Context, _a1 *wafv2.UpdateIPSetInput, _a2 ...request.Option) (*wafv2.UpdateIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.UpdateIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.UpdateIPSetInput, ...request.Option) *wafv2.UpdateIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.UpdateIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateRegexPatternSet(_a0 *wafv2.UpdateRegexPatternSetInput) (*wafv2.UpdateRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.UpdateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateRegexPatternSetInput) *wafv2.UpdateRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateRegexPatternSetRequest(_a0 *wafv2.UpdateRegexPatternSetInput) (*request.Request, *wafv2.UpdateRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.UpdateRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateRegexPatternSetInput) *wafv2.UpdateRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.UpdateRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// UpdateRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) UpdateRegexPatternSetWithContext(_a0 context.Context, _a1 *wafv2.UpdateRegexPatternSetInput, _a2 ...request.Option) (*wafv2.UpdateRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.UpdateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.UpdateRegexPatternSetInput, ...request.Option) *wafv2.UpdateRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.UpdateRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRuleGroup provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateRuleGroup(_a0 *wafv2.UpdateRuleGroupInput) (*wafv2.UpdateRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.UpdateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateRuleGroupInput) *wafv2.UpdateRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateRuleGroupRequest(_a0 *wafv2.UpdateRuleGroupInput) (*request.Request, *wafv2.UpdateRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.UpdateRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateRuleGroupInput) *wafv2.UpdateRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.UpdateRuleGroupOutput)
		}
	}

	return r0, r1
}

// UpdateRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) UpdateRuleGroupWithContext(_a0 context.Context, _a1 *wafv2.UpdateRuleGroupInput, _a2 ...request.Option) (*wafv2.UpdateRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.UpdateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.UpdateRuleGroupInput, ...request.Option) *wafv2.UpdateRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.UpdateRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebACL provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateWebACL(_a0 *wafv2.UpdateWebACLInput) (*wafv2.UpdateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafv2.UpdateWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateWebACLInput) *wafv2.UpdateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFV2API) UpdateWebACLRequest(_a0 *wafv2.UpdateWebACLInput) (*request.Request, *wafv2.UpdateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafv2.UpdateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafv2.UpdateWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafv2.UpdateWebACLInput) *wafv2.UpdateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafv2.UpdateWebACLOutput)
		}
	}

	return r0, r1
}

// UpdateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFV2API) UpdateWebACLWithContext(_a0 context.Context, _a1 *wafv2.UpdateWebACLInput, _a2 ...request.Option) (*wafv2.UpdateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafv2.UpdateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafv2.UpdateWebACLInput, ...request.Option) *wafv2.UpdateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafv2.UpdateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafv2.UpdateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
